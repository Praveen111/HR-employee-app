{"version":3,"sources":["components/Table.jsx","components/Search.jsx","App.js","serviceWorker.js","index.js"],"names":["Table","props","rows","setNewValues","deleteRow","addMode","useState","key","value","row","setRow","setEditVaue","eMode","seteMode","onChange","e","i","field","val","target","console","log","onEnter","border","className","map","r","name","placeholder","onBlur","dept","skills","href","onClick","data","splice","removeData","eValue","indexOf","onEdit","Search","onSearch","App","setRows","useEffect","localStorage","setItem","removeItem","filteredRows","filter","length","rowsold","JSON","parse","getItem","values","stringify","rowsNew","find","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fab3583c.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nfunction Table(props) {\r\n    const {rows,setNewValues,deleteRow,addMode} = props;\r\n    const [row,setRow] = useState({key:null,value:{}});\r\n    const [editValue,setEditVaue] = useState({});\r\n    const [eMode,seteMode] = useState(false)\r\n    const onEdit = (e,data) => {\r\n        const eValue = {...data};\r\n        setEditVaue(eValue);\r\n        const i = rows.indexOf(data);\r\n        setRow({key:i,value:data})\r\n        seteMode(true)\r\n\r\n    }\r\n\r\n    const onDelete = (e,data) => {\r\n        deleteRow(data)\r\n    }\r\n\r\n    const onChange = (e,i,field) => {\r\n        let val = row.value;\r\n          let value = {...val,[field] :e.target.value};\r\n          console.log(\"Val on change\",val)\r\n           setRow({key:i,value});\r\n          setEditVaue(row.value);\r\n    }\r\n\r\n    const onEnter = (e,i,field) => {\r\n          setEditVaue(row.value);\r\n        }\r\n\r\n   const saveValue = (e) => {\r\n            let rowsNew = rows;\r\n            rowsNew.splice(row.key,1,row.value);\r\n            setNewValues(rowsNew);\r\n            setRow({key:null,value:{}})\r\n            setEditVaue({})\r\n   }\r\n\r\n   const removeData = (data,i) => {\r\n    let rowsNew = rows;\r\n    rowsNew.splice(i,1);\r\n    setNewValues([...rows,row.value])\r\n    setEditVaue({});\r\n    setRow({key:null,value:{}})\r\n    seteMode(false);\r\n   }\r\n\r\n  return (\r\n    <>\r\n       <table border=\"1\" className=\"center\">\r\n           <thead>\r\n               <th>Name</th>\r\n               <th>Department</th>\r\n               <th>Skills</th>\r\n               <th>Action</th>\r\n            </thead>\r\n           <tbody>\r\n                   {rows.map((r,i) =>\r\n                    <>{((!eMode &&   r.name!== '')) ? <tr>\r\n                         {console.log('1st condition')}\r\n                        <td>{r.name === '' ?  <input value={row.value.name} placeholder=\"Name\" onBlur={onEnter} onChange={(e) => onChange(e,i,'name')} /> : r.name}</td>\r\n                   <td>{r.dept === '' ?  <input placeholder=\"Department\" value={row.value.dept} onBlur={onEnter} onChange={(e) => onChange(e,i,'dept')} /> : r.dept}</td>\r\n                   <td>{r.skills === '' ?  <input placeholder=\"Skills\" value={row.value.skills} onBlur={onEnter} onChange={(e) => onChange(e,i,'skills')} /> : r.skills}</td>\r\n                   {(r.name !== '') &&  (<td><a href=\"#\" onClick={(e) => onEdit(e,r)}>Edit</a><br/>\r\n                   <a href=\"#\" onClick={( e) => onDelete(e,r)}>Delete</a></td>)}\r\n                   </tr> : <tr>\r\n                       <td> <input value={row.value.name} placeholder=\"Name\" onBlur={(e) =>onEnter(e,i,'name')} onChange={(e) => onChange(e,i,'name')} /></td>\r\n                       <td> <input value={row.value.dept} placeholder=\"Department\" onBlur={(e) =>onEnter(e,i,'dept')} onChange={(e) => onChange(e,i,'dept')} /></td>\r\n                       <td> <input value={row.value.skills} placeholder=\"Skills\" onBlur={(e) =>onEnter(e,i,'skills')} onChange={(e) => onChange(e,i,'skills')} /></td>\r\n                       <td>\r\n                       {/* <a href=\"#\" onClick={(e) => saveValue(e)}>Save</a> */}\r\n                           <a href=\"#\" onClick={() => removeData(r,i)}>Save</a></td>\r\n                       </tr>}\r\n                   </>) \r\n                   }\r\n               \r\n           </tbody>\r\n       </table>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Table;","import React,{useState} from 'react';\n\nfunction Search(props) {\n  return (\n    <>\n     <input placeholder=\"Search\" onChange={props.onSearch} />\n    </>\n  );\n}\n\nexport default Search;\n","import React,{useState,useEffect} from 'react';\r\nimport './App.css';\r\nimport Table from './components/Table';\r\nimport Search from './components/Search';\r\n\r\nfunction App() {\r\n  const [rows,setRows] = useState([{\r\n    name:'Praveen',\r\n    dept:'Development',\r\n    skills:'C# ,Javascript'\r\n  }]);\r\n\r\n  useEffect(() => {\r\n  localStorage.setItem('rows',rows);\r\n  return () => localStorage.removeItem('rows');\r\n  },[])\r\n  const [keyword,setKeyword] = useState('')\r\n  const onSearch = (e) => {\r\n    const filteredRows = rows.filter(row => row.name === e.target.value || row.dept === e.target.value);\r\n    if(filteredRows.length > 0) {\r\n      setRows([...filteredRows]);\r\n    } else {\r\n      const rowsold = JSON.parse(localStorage.getItem('rows'));\r\n      setRows(rowsold);\r\n    }\r\n  }\r\n  const onAdd =(e) => {\r\n    const values = rows;\r\n    setRows([...values,{name:'',dept:'',skills:''}]);\r\n  }\r\n\r\n  const newValues = (rows) =>{\r\n    const values = rows;\r\n    setRows([...values]);\r\n    localStorage.setItem('rows',JSON.stringify(values));\r\n  }\r\n\r\n  const deleteRow = data => {\r\n    const rowsNew = [...rows];\r\n    const i = rowsNew.indexOf(data)\r\n    rowsNew.splice(i,1);\r\n    localStorage.setItem('rows',rowsNew);\r\n    setRows([...rowsNew]);\r\n   \r\n  }\r\n\r\n  console.log(\"Parent\",rows);\r\n  return (\r\n    <div className=\"App\">\r\n    <h3>Welcome To Replicon HR System</h3>\r\n       <Search onSearch={onSearch} />\r\n       <br/>\r\n       <br/>\r\n       {rows.length > 0 ?\r\n       <Table rows={rows} setRows={setRows} setNewValues={newValues} deleteRow={deleteRow} addMode={rows.find(r => r.name === '' || r.dept === '' || r.skills === '')} />\r\n      : <>No Values in the table, please add new employees</>\r\n      }\r\n       <br />\r\n       <a href=\"#\" onClick={onAdd}>Add Employee</a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}