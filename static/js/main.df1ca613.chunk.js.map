{"version":3,"sources":["components/Table.jsx","components/Search.jsx","App.js","serviceWorker.js","index.js"],"names":["Table","props","rows","setNewValues","deleteRow","addMode","useState","key","value","row","setRow","eMode","seteMode","saveValue","e","rowsNew","splice","name","dept","skills","alert","cancel","inputElement","placeHolder","i","field","placeholder","onChange","val","target","border","className","map","r","href","onClick","data","onEdit","Search","onSearch","App","setRows","useEffect","localStorage","setItem","JSON","stringify","removeItem","length","filteredRows","filter","search","rowsold","parse","getItem","values","console","log","indexOf","find","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.df1ca613.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nfunction Table(props) {\r\n    const {rows,setNewValues,deleteRow,addMode} = props;\r\n    const [row,setRow] = useState({key:null,value:{}});\r\n    const [eMode,seteMode] = useState(false);\r\n\r\n    const onEdit = (e,data,i) => {\r\n        seteMode(true);\r\n        setRow({key:i,value:data});  \r\n    }\r\n\r\n    const onDelete = (e,data) => {\r\n        deleteRow(data)\r\n    }\r\n\r\n    const onChange = (e,i,field) => {\r\n        let val = row.value;\r\n          let value = {...val,[field] :e.target.value};\r\n           setRow({key:i,value});\r\n    }\r\n\r\n   const saveValue = (e) => {\r\n            let rowsNew = rows;\r\n            rowsNew.splice(row.key,1,row.value);\r\n            const {name,dept,skills} = row.value;\r\n            if(name === '' || dept === '' || skills === '') {\r\n              alert('Please add values to save');\r\n              return;\r\n            }\r\n            setNewValues(rowsNew);\r\n            setRow({key:null,value:{}})\r\n            seteMode(false);\r\n   }\r\n\r\n   const cancel = () => {\r\n    setRow({key:null,value:{}})\r\n    seteMode(false);\r\n   }\r\n\r\nconst inputElement = (placeHolder,i,field) => ( <input placeholder={placeHolder}  value={row['value'][field]} onChange={(e) => onChange(e,i,field)} />);\r\n  return (\r\n    <>\r\n       <table border=\"1\" className=\"center\">\r\n           <tr>\r\n               <th>Name</th>\r\n               <th>Department</th>\r\n               <th>Skills</th>\r\n               <th>Action</th>\r\n            </tr>\r\n           <tbody>\r\n                   {rows.map((r,i) =>\r\n                    <>{(((!eMode || i !== row.key))) ? \r\n                    <tr>\r\n                        <td>{r.name === '' ?  inputElement('Name',i,'name') : r.name}</td>\r\n                        <td>{r.dept === '' ?  inputElement('Department',i,'dept') : r.dept}</td>\r\n                        <td>{r.skills === '' ? inputElement('Skills',i,'skills')  : r.skills}</td>\r\n                        {(r.name !== '') ?  (<td><a href=\"#\" onClick={(e) => onEdit(e,r,i)}>Edit</a><br/>\r\n                              <a href=\"#\" onClick={( e) => onDelete(e,r)}>Delete</a></td>) : (    \r\n                              \r\n                              <td>\r\n                    \r\n                                     <a href=\"#\" onClick={() => saveValue(r,i)}>Save</a>\r\n                                        <br />\r\n                                     <a href=\"#\" onClick={(e) => cancel()}>Cancel</a>\r\n                             </td> \r\n                           )}\r\n                    </tr> : \r\n                    (<tr>\r\n                       <td>{inputElement('Name',i,'name')}</td>\r\n                       <td> {inputElement('Department',i,'dept')}</td>\r\n                       <td>{inputElement('Skills',i,'skills')}</td>\r\n                       <td>\r\n                           <a href=\"#\" onClick={() => saveValue(r,i)}>Save</a>\r\n                           <br />\r\n                             <a href=\"#\" onClick={(e) => cancel()}>Cancel</a>\r\n                           </td> \r\n                       </tr>)}\r\n                   </>) \r\n                   }\r\n               \r\n           </tbody>\r\n       </table>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Table;","import React,{useState} from 'react';\n\nfunction Search(props) {\n  return (\n    <>\n     <input placeholder=\"Search\" onChange={props.onSearch} />\n    </>\n  );\n}\n\nexport default Search;\n","import React,{useState,useEffect} from 'react';\r\nimport './App.css';\r\nimport Table from './components/Table';\r\nimport Search from './components/Search';\r\n\r\nfunction App() {\r\n  const [rows,setRows] = useState([{\r\n    name:'Praveen',\r\n    dept:'Development',\r\n    skills:'C# ,Javascript'\r\n  }]);\r\n\r\n  useEffect(() => {\r\n  localStorage.setItem('rows',JSON.stringify(rows));\r\n  return () => localStorage.removeItem('rows');\r\n  },[])\r\n  const [keyword,setKeyword] = useState('')\r\n  const onSearch = (e) => {\r\n\r\n    if(e.target.value.length > 0) {\r\n      const filteredRows = rows.filter(row => row.name.search(e.target.value) > -1 || row.dept.search(e.target.value) > -1 || row.skills.search(e.target.value)  > -1);\r\n      if(filteredRows.length > 0) {\r\n        setRows([...filteredRows]);\r\n      } else {\r\n        const rowsold = JSON.parse(localStorage.getItem('rows'));\r\n        setRows(rowsold);\r\n      }\r\n    } else {\r\n      setRows(JSON.parse(localStorage.getItem('rows')));\r\n    }\r\n    \r\n  \r\n  \r\n  }\r\n  const onAdd =(e) => {\r\n    const values = rows;\r\n    setRows([...values,{name:'',dept:'',skills:''}]);\r\n  }\r\n\r\n  const newValues = (rows) =>{\r\n    const values = rows;\r\n    console.log('new Values',rows);\r\n    setRows([...values]);\r\n    localStorage.setItem('rows',JSON.stringify(values));\r\n  }\r\n\r\n  const deleteRow = data => {\r\n    const rowsNew = [...rows];\r\n    const i = rowsNew.indexOf(data)\r\n    rowsNew.splice(i,1);\r\n    localStorage.setItem('rows',JSON.stringify(rowsNew));\r\n    setRows([...rowsNew]);\r\n   \r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n    <h3>Welcome To HR System</h3>\r\n       <Search onSearch={onSearch} />\r\n       <br/>\r\n       <br/>\r\n       {rows.length > 0 ?\r\n       <Table rows={rows} setRows={setRows} setNewValues={newValues} deleteRow={deleteRow} addMode={rows.find(r => r.name === '' || r.dept === '' || r.skills === '')} />\r\n      : <>No Values in the table, please add new employees</>\r\n      }\r\n       <br />\r\n       <a href=\"#\" onClick={onAdd}>Add Employee</a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}