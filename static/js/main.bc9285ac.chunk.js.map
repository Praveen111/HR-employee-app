{"version":3,"sources":["components/Table.jsx","components/Search.jsx","App.js","serviceWorker.js","index.js"],"names":["Table","props","rows","setNewValues","deleteRow","useState","key","value","row","setRow","editValue","setEditVaue","onChange","e","i","field","target","onEnter","rowsNew","splice","console","log","border","className","map","r","name","placeholder","onBlur","onKeyDown","dept","skills","length","href","onClick","data","eValue","onEdit","Search","onSearch","App","setRows","filteredRows","filter","rowsold","JSON","parse","localStorage","getItem","values","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bc9285ac.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nfunction Table(props) {\n    const {rows,setNewValues,deleteRow} = props;\n    const [row,setRow] = useState({key:0,value:{}});\n    const [editValue,setEditVaue] = useState({});\n    const onEdit = (e,data) => {\n        const eValue = {...data};\n        setEditVaue(eValue);\n    }\n\n    const onDelete = (e,data) => {\n        deleteRow(data)\n    }\n\n    const onChange = (e,i,field) => {\n          let value = {...rows[i],[field] :e.target.value};\n          setRow({key:i,value});\n          setEditVaue({...rows[i],[field] :e.target.value});\n    }\n\n    const onEnter = (e) => {\n            let rowsNew = rows;\n            rowsNew.splice(row.key,1,row.value);\n            setNewValues(rowsNew)\n        }\n\n//    const saveValue = (e) => {\n//             let rowsNew = rows;\n//             rowsNew.splice(row.key,1,row.value);\n//             setNewValues(rowsNew)\n//             setEditVaue({})\n//    }\n\n   const removeData = data => {\n    // let rowsNew = rows;\n    // rowsNew.splice(data,1);\n    // setNewValues(rowsNew)\n    setEditVaue({})\n   }\nconsole.log(\"Editvalue\",editValue,row.value)\n  return (\n    <>\n       <table border=\"1\" className=\"center\">\n           <thead>\n               <th>Name</th>\n               <th>Department</th>\n               <th>Skills</th>\n               <th>Action</th>\n            </thead>\n           <tbody>\n                   {rows.map((r,i) =>\n                    <>{editValue.name !== r.name || editValue === {} ? <tr><td>{r.name === '' && row.value.name !== r.name ?  <input placeholder=\"Name\" onBlur={onEnter} onKeyDown={onEnter} onChange={(e) => onChange(e,i,'name')} /> : r.name}</td>\n                   <td>{r.dept === '' ?  <input placeholder=\"Department\" onBlur={onEnter} onKeyDown={onEnter} onChange={(e) => onChange(e,i,'dept')} /> : r.dept}</td>\n                   <td>{r.skills.length === 0 ?  <input placeholder=\"Skills\" onBlur={onEnter} onKeyDown={onEnter} onChange={(e) => onChange(e,i,'skills')} /> : r.skills}</td>\n                   {r.name !== '' && (<td><a href=\"#\" onClick={(e) => onEdit(e,r)}>Edit</a><br/>\n                   <a href=\"#\" onClick={(e) => onDelete(e,r)}>Delete</a></td>)}\n                   </tr> : <tr>\n                       <td> <input value={editValue.name} placeholder=\"Name\" onBlur={onEnter} onChange={(e) => onChange(e,i,'name')} /></td>\n                       <td> <input value={editValue.dept} placeholder=\"Department\" onBlur={onEnter} onChange={(e) => onChange(e,i,'dept')} /></td>\n                       <td> <input value={editValue.skills} placeholder=\"Skills\" onBlur={onEnter} onChange={(e) => onChange(e,i,'skills')} /></td>\n                       <td>\n                       {/* <a href=\"#\" onClick={(e) => saveValue(e)}>Save</a> */}\n                           <a href=\"#\" onClick={() => removeData(r)}>Save</a></td>\n                       </tr>}\n                   </>) \n                   }\n               \n           </tbody>\n       </table>\n    </>\n  );\n}\n\nexport default Table;","import React,{useState} from 'react';\n\nfunction Search(props) {\n  return (\n    <>\n     <input placeholder=\"Search\" onChange={props.onSearch} />\n    </>\n  );\n}\n\nexport default Search;\n","import React,{useState} from 'react';\nimport './App.css';\nimport Table from './components/Table';\nimport Search from './components/Search';\n\nfunction App() {\n  const [rows,setRows] = useState([{\n    name:'Praveen',\n    dept:'Development',\n    skills:'C# ,Javascript'\n  }]);\n  const [keyword,setKeyword] = useState('')\n  const onSearch = (e) => {\n    const filteredRows = rows.filter(row => row.name === e.target.value || row.dept === e.target.value);\n    if(filteredRows.length > 0) {\n      setRows([...filteredRows]);\n    } else {\n      const rowsold = JSON.parse(localStorage.getItem('rows'));\n      setRows(rowsold);\n    }\n  }\n  const onAdd =(e) => {\n    const values = rows;\n    setRows([...values,{name:'',dept:'',skills:[]}]);\n  }\n\n  const newValues = (rows) =>{\n    const values = rows;\n    setRows([...values]);\n    localStorage.setItem('rows',JSON.stringify(values));\n  }\n\n  const deleteRow = data => {\n    const rowsNew = [...rows];\n    rowsNew.splice(data,1);\n    localStorage.setItem('rows',rowsNew);\n    setRows([...rowsNew]);\n   \n  }\n\n  console.log(\"Parent\",rows);\n  return (\n    <div className=\"App\">\n    <h3>Welcome To Replicon HR System</h3>\n       <Search onSearch={onSearch} />\n       <br/>\n       <br/>\n       {rows.length > 0 ?\n       <Table rows={rows} setRows={setRows} setNewValues={newValues} deleteRow={deleteRow} />\n      : <>No Values in the table, please add new employees</>\n      }\n       <br />\n       <a href=\"#\" onClick={onAdd}>Add Employee</a>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}